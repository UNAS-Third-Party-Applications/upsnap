#!/bin/bash
#

set -e
set -o pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

cd "$SCRIPT_DIR/.."

# 获取软件目录名称
SOFT_DIR=$(basename "$PWD")

# Get package version without double quotes
# 从app.json中获取包名
PACKAGE_NAME="$( eval echo $( jq '.appPackageName' app.json) )"
APP_DEVELOPER="$( eval echo $( jq '.appDeveloper' app.json) )"
# 从app.json中获取版本号
VERSION="$( eval echo $( jq '.appVersion' app.json) )"
# 从app.json中获取描述
DESCRIPTION="$( eval echo $( jq '.appDescription' app.json) )"
# 打包完成后的文件名
OUTPUT_FILE="${PACKAGE_NAME}_${VERSION}_amd64.deb"

echo ">>> Building Client"
echo "--------------------"

# 预处理，比如需要编译时进行文件编译等

echo ">>> Packaging"
echo "--------------------"

# 复制相关文件到dist目录
mkdir -p dist
# 删除之前的dist/debian
rm -rf dist/debian
# 创建新的dist/debian
mkdir -p dist/debian
# cp -R build/debian dist/debian
# 使用rsync命令替代cp进行文件复制，用于实现复制时过滤文件
rsync -avrP --exclude='.history' --exclude='.git' --exclude='.gitkeep' --exclude='.gitignore' build/debian/ dist/debian/
# 创建程序目录
mkdir -p "dist/debian/unas/apps/$SOFT_DIR"
# 复制应用程序文件到dist/debian/unas/apps目录，用于实现程序的安装
rsync -avrP --exclude='.history' --exclude='.git' --exclude='.gitkeep' --exclude='.gitignore' --exclude='build' --exclude='dist' ./ "./dist/debian/unas/apps/$SOFT_DIR"
chmod -R 775 dist/debian

# 替换DEBIAN目录中的各种处理脚本中的文件路径
SCRIPTS=("dist/debian/DEBIAN/preinst" "dist/debian/DEBIAN/postinst" "dist/debian/DEBIAN/prerm" "dist/debian/DEBIAN/postrm")

for SCRIPT_ITEM in "${SCRIPTS[@]}"
do
  if [ -e "$SCRIPT_ITEM" ]; then
    sed -i "s/SOFT_DIR/$SOFT_DIR/g" "$SCRIPT_ITEM"
  fi
done

# Create debian control file
controlfile="Package: $PACKAGE_NAME
Version: $VERSION
Section: base
Priority: optional
Architecture: amd64
Depends:
Maintainer: $APP_DEVELOPER
Description: $DESCRIPTION"

echo "$controlfile" > dist/debian/DEBIAN/control;

# Package debian

# fakeroot可以模拟root，但是需要安装一下 apt-get install fakeroot
# fakeroot dpkg-deb -Zxz --build dist/debian

# 创建package目录，可以提交给UNAS
PACKAGE_CONFIG_NAME="${PACKAGE_NAME}_config"
mkdir -p "dist/$PACKAGE_CONFIG_NAME"
sudo dpkg -b dist/debian "dist/$PACKAGE_CONFIG_NAME/$OUTPUT_FILE"

# 复制package_config目录内的文件到package目录
cp -R build/package_config/* "dist/$PACKAGE_CONFIG_NAME/"
# 从app.json中获取section
SECTION="$( eval echo $( jq '.appSection' app.json) )"
APP_NAME="$( eval echo $( jq '.appName' app.json) )"
APP_SIZE=`stat --format="%s" dist/$PACKAGE_CONFIG_NAME/$OUTPUT_FILE | awk '{printf "%.2fM", $1/1024/1024}'`
INSTALL_SIZE=`ls -lR "dist/debian/unas/apps/$SOFT_DIR/" | grep "^-" | awk '{total += $5} END {printf "%.2fM", total/1024/1024}'`

# 创建包的config.json
packageConfig="{
    \"ConfigInfo\": {
        \"appdir\": \"$SOFT_DIR\",
        \"appname\": \"$APP_NAME\",
        \"description\": \"$DESCRIPTION\",
        \"developer\": \"$APP_DEVELOPER\",
        \"icon\": \"logo.png\",
        \"installedsize\": \"$INSTALL_SIZE\",
        \"packagename\": \"$PACKAGE_NAME\",
        \"removable\": \"YES\",
        \"section\": \"$SECTION\",
        \"shot\": \"shot.jpg\",
        \"size\": \"$APP_SIZE\",
        \"translationfile\": \"translation\",
        \"version\": \"$VERSION\"
    }
}"
echo "$packageConfig" > "dist/$PACKAGE_CONFIG_NAME/config.json";

# 将dist/$PACKAGE_CONFIG_NAME目录压缩为zip文件
cd dist/
zip -r "$PACKAGE_CONFIG_NAME.zip" "$PACKAGE_CONFIG_NAME/"

echo "Finished! Filename: $OUTPUT_FILE"
